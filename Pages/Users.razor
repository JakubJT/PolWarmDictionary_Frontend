@page "/users"
@using System.Net.Http
@using Microsoft.AspNetCore.Authorization
@using Models
@attribute [Authorize]
@inject HttpClient Http
@inject IConfiguration Configuration
@inject NavigationManager NavigationManager
@inject IJSRuntime JS
@inject ISessionStorageService SessionStorageServices
@inject Endpoint Endpoint
@inject Sorting Sorting
@inject RequestMessageGenerator RequestMessageGenerator
@inject IStringLocalizer<Localization.Localization> Loc


<PageTitle>@Loc["UsersPageTitle"]</PageTitle>

<h1>@Loc["UsersHeading"]</h1>
<div>
    @if (users == null)
    {
        if (ErrorHandleMessage != null)
        {
            @ErrorHandleMessage
        }
        else
        {
            <p><em>@Loc["Loading"]</em></p>
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
        }
    }
    else
    {
        <div class="card-container">
            @foreach (var user in users)
            {
                <RadzenCard class="m-3 rz-shadow-5">
                    <h3 class="h5">@Loc["UsersUserInfoTitle"]</h3>
                    <div class="d-flex flex-row">
                        <div>
                            <div>@Loc["UsersUserInfoName"]</div>
                            <b>@user.Name</b>
                            <div>E-mail</div>
                            <b>@(user.Email == null ? Loc["UsersUserInfoNoEmail"] : user.Email)</b>
                            <div class="mt-3">@Loc["UsersUserInfoCollectionNumber"]</div>
                            <b>@user.NumberOfWordGroups</b>
                        </div>
                    </div>
                </RadzenCard>
            }
        </div>
    }
</div>

@code {
    [CascadingParameter]
    public Error? Error { get; set; }
    private RenderFragment? ErrorHandleMessage { get; set; }
    private List<User>? users;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            await GetUsers();
        }
        catch (Exception ex)
        {
            ErrorHandleMessage = Error?.HandleError(ex);
        }
    }

    private async Task GetUsers()
    {
        try
        {
            string requestUri = Endpoint.Url + $"/user/getallusers";
            var requestMessage = await RequestMessageGenerator.GetHttpRequestMessage(HttpMethod.Get, requestUri);
            var getResponse = await Http.SendAsync(requestMessage);
            if (getResponse.StatusCode == System.Net.HttpStatusCode.Unauthorized)
            {
                ErrorHandleMessage = __builder =>
                {
                    <div class="alert alert-secondary" role="alert">
                        @Loc["UsersGetUsersErrorUnauthorized"]
                    </div>
                };
                return;
            }
            else if (getResponse.StatusCode == System.Net.HttpStatusCode.NoContent)
            {
                ErrorHandleMessage = __builder =>
                {
                    <div class="alert alert-secondary" role="alert">
                        @Loc["UsersGetUsersErrorNoContent"]
                    </div>
                };
                return;
            }
            else if (!getResponse.IsSuccessStatusCode)
            {
                ErrorHandleMessage = __builder =>
                {
                    <div class="alert alert-warning" role="alert">
                        @Loc["UsersGetUsersErrorDefault"]<em>@getResponse.StatusCode</em>
                    </div>
                };
                return;
            }

            users = await getResponse.Content.ReadFromJsonAsync<List<User>>();
        }
        catch (Exception ex)
        {
            ErrorHandleMessage = Error?.HandleError(ex);
        }
    }
}