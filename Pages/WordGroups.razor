@page "/wordgroups"
@using System.Net.Http
@using Microsoft.AspNetCore.Authorization
@using Models
@attribute [Authorize]
@inject ILogger<Error> Logger
@inject HttpClient Http
@inject IConfiguration Configuration
@inject NavigationManager NavigationManager
@inject IJSRuntime JS
@inject ISessionStorageService SessionStorageServices
@inject Endpoint Endpoint
@inject Sorting Sorting
@inject RequestMessageGenerator RequestMessageGenerator
@inject IStringLocalizer<Localization.Localization> Loc


<PageTitle>@Loc["WordGroupsPageTitle"]</PageTitle>
@if (EditMode)
{
    <EditCreateWordGroup WordGroup="WordGroupToEdit" BackToReadMode="BackToReadMode"></EditCreateWordGroup>
}
else
{
    <h1>@Loc["WordGroupsHeading"]</h1>
    <div>
        @if (wordGroups == null)
        {
            if (ErrorHandleMessage != null)
            {
                @ErrorHandleMessage
            }
            else
            {
                <p><em>@Loc["Loading"]</em></p>
                <div class="spinner-border text-primary" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
            }
        }
        else
        {
            <table class="table">
                <thead>
                    <tr>
                        <th>
                            <button type="button" class="btn btn-outline-secondary btn-sm header-button">
                                @Loc["WordGroupsTableName"]
                            </button>
                        </th>
                        <th>
                            <button type="button" class="btn btn-outline-secondary btn-sm header-button">
                                @Loc["WordGroupsTableWordNumber"]
                            </button>
                        </th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var wordGroup in wordGroups)
                    {
                        <tr>
                            <td>@wordGroup.Name</td>
                            <td>@wordGroup.Words!.Count()</td>
                            <td class="narrow">
                                <button type="button" class="btn btn-primary btn-sm" @onclick=@(() => { WordGroupToEdit = wordGroup;
                        EditMode = true; })>@Loc["Edit"]
                                </button>
                            </td>
                            <td class="narrow">
                                <button type="button" class="btn btn-danger btn-sm" @onclick=@(() => DeleteClick(wordGroup))
                                    data-bs-toggle="modal" data-bs-target="#deleteWordModal">@Loc["Delete"]</button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
            <div>
                <button type="button" class="btn btn-primary btn-sm" @onclick="ShowModal">@Loc["WordGroupsCreateNew"]</button>
            </div>
        }
    </div>


    <div class="modal fade" id="createCollectionModal" tabindex="-1" aria-labelledby="createCollectionModalLabel"
        aria-hidden="true">
        <div class="modal-dialog modal-dialog-scrollable">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="createCollectionModalLabel">@Loc["WordGroupsCreateModalTitle"]</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <EditCreateWordGroup CreateForm="true" BackToReadMode="BackToReadMode"></EditCreateWordGroup>
                </div>
            </div>
        </div>
    </div>
}

<div class="toast-container position-fixed bottom-0 end-0 p-3">
    <div class="toast bg-info" id="actionToast" role="alert" aria-live="assertive" aria-atomic="true">
        <div class="d-flex">
            <div class="toast-body">
                @Loc["WordGroupsToastContent"]
            </div>
            <button type="button" class="btn-close me-2 m-auto" data-bs-dismiss="toast" aria-label="Close"></button>
        </div>
    </div>
</div>

<div class="modal fade" id="deleteWordModal" tabindex="-1" aria-labelledby="deleteWordModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="deleteWordModalLabel">@Loc["WordGroupsDeleteModalTitle"]</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <p>@Loc["WordGroupsDeleteModalContent"]<em>@wordGroupToDelete?.Name</em>?</p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">@Loc["No"]</button>
                <button type="button" class="btn btn-primary" data-bs-dismiss="modal"
                    @onclick="DeleteWordGroup">@Loc["Yes"]</button>
            </div>
        </div>
    </div>
</div>


@code {
    [CascadingParameter]
    public Error? Error { get; set; }
    private RenderFragment? ErrorHandleMessage { get; set; }
    private List<WordGroup>? wordGroups;
    private bool EditMode { get; set; }
    public WordGroup? WordGroupToEdit { get; set; }
    private WordGroup? wordGroupToDelete;
    private bool isModalShowed = false;


    protected override async Task OnInitializedAsync()
    {
        try
        {
            await GetWordGroups();
        }
        catch (Exception ex)
        {
            ErrorHandleMessage = Error?.HandleError(ex);
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (SessionStorageServices.GetItem<bool?>("actionSucceeded") == true)
        {
            var module = await JS.InvokeAsync<IJSObjectReference>("import", "./Pages/WordGroups.razor.js");
            await module.InvokeVoidAsync("showActionToast");
            if (module is not null) await module.DisposeAsync();
            SessionStorageServices.SetItem("actionSucceeded", false);
        }
    }

    private async Task BackToReadMode(bool loadGroups)
    {
        if (isModalShowed) await HideModal();
        EditMode = false;
        if (loadGroups)
        {
            wordGroups = null;
            await GetWordGroups();
        }
    }

    private async Task ShowModal()
    {
        var module = await JS.InvokeAsync<IJSObjectReference>("import", "./Pages/WordGroups.razor.js");
        await module.InvokeVoidAsync("showModal");
        if (module is not null) await module.DisposeAsync();
        isModalShowed = true;
    }

    private async Task HideModal()
    {
        var module = await JS.InvokeAsync<IJSObjectReference>("import", "./Pages/WordGroups.razor.js");
        await module.InvokeVoidAsync("hideModal");
        if (module is not null) await module.DisposeAsync();
        isModalShowed = false;
    }

    private async Task GetWordGroups()
    {
        try
        {
            string requestUri = Endpoint.Url + $"/wordgroup/getallwordgroups";
            var requestMessage = await RequestMessageGenerator.GetHttpRequestMessage(HttpMethod.Get, requestUri);
            var getResponse = await Http.SendAsync(requestMessage);
            if (getResponse.StatusCode == System.Net.HttpStatusCode.NoContent)
            {
                ErrorHandleMessage = __builder =>
                {
                    <div class="alert alert-secondary" role="alert">
                        @Loc["WordGroupsGetWordGroupsErrorNoContent"]
                    </div>
                    <div>
                        <button type="button" class="btn btn-primary btn-sm" @onclick="ShowModal">@Loc["WordGroupsCreateNew"]</button>
                    </div>
                };
                return;
            }
            else if (!getResponse.IsSuccessStatusCode)
            {
                ErrorHandleMessage = __builder =>
                {
                    <div class="alert alert-warning" role="alert">
                        @Loc["WordGroupsGetWordGroupsErrorDefault"]<em>@getResponse.StatusCode</em>
                    </div>
                };
                return;
            }

            wordGroups = await getResponse.Content.ReadFromJsonAsync<List<WordGroup>>();
        }
        catch (Exception ex)
        {
            ErrorHandleMessage = Error?.HandleError(ex);
        }
    }

    public void DeleteClick(WordGroup wordGroup)
    {
        wordGroupToDelete = wordGroup;
    }

    public async Task DeleteWordGroup()
    {
        try
        {
            string requestUri = Endpoint.Url + $"/wordgroup/deletewordgroup?wordGroupId={wordGroupToDelete!.WordGroupId}";
            var requestMessage = await RequestMessageGenerator.GetHttpRequestMessage(HttpMethod.Delete, requestUri);
            var deleteResponse = await Http.SendAsync(requestMessage);
            if (deleteResponse.StatusCode == System.Net.HttpStatusCode.NotFound)
            {
                ErrorHandleMessage = __builder =>
                {
                    <div class="alert alert-warning" role="alert">
                        @(String.Format(@Loc["WordGroupsDeleteWordGroupErrorNotFound"], @wordGroupToDelete.Name))
                    </div>
                };
                Logger.LogError("DeleteWordGroup request returned status code: " + deleteResponse.StatusCode.ToString());
                return;
            }
            else if (!deleteResponse.IsSuccessStatusCode)
            {
                ErrorHandleMessage = __builder =>
                {
                    <div class="alert alert-warning" role="alert">
                        @Loc["WordGroupsDeleteWordGroupErrorDefault"]<em>{response.StatusCode}</em>
                    </div>
                };
                return;
            }
            await GetWordGroups();
        }
        catch (Exception ex)
        {
            ErrorHandleMessage = Error?.HandleError(ex);
        }
    }
}