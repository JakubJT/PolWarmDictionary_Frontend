@page "/allwords"
@using System.Net.Http
@using Models
@inject HttpClient Http
@inject IConfiguration Configuration
@inject NavigationManager NavigationManager
@inject IJSRuntime JS
@inject ISessionStorageService SessionStorageServices
@inject Endpoint Endpoint

<PageTitle>Wszystkie słówka</PageTitle>

<h1>Wszystkie słówka ze słownika</h1>
<div>
    @if (words == null)
    {
        if (ErrorHandleMessage != null)
        {
            @ErrorHandleMessage
        }
        else
        {
            <p><em>Wczytywanie...</em></p>
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
        }
    }
    else
    {
            <table class="table">
                <thead>
                    <tr>
                        <th>
                            <button type="button" class="btn btn-outline-secondary btn-sm header-button" @onclick=@(async() => await SortClick("InPolish"))>
                                Po polsku
                            </button>
                        </th>
                        <th>
                            <button type="button" class="btn btn-outline-secondary btn-sm header-button" @onclick=@(async() => await SortClick("InWarmian"))>
                                Po warmińsku
                            </button>
                        </th>
                        <th>
                            <button type="button" class="btn btn-outline-secondary btn-sm header-button" @onclick=@(async() => await SortClick("PartOfSpeech"))>
                                Część mowy
                             </button>
                        </th>
                        <th></th>
                        <th></th>
                    </tr>
                </thead>
                <tbody>
                @foreach (var word in words)
                {
                            <tr>
                                <td>@word.InPolish</td>
                                <td>@word.InWarmian</td>
                                <td>@word.PartOfSpeech</td>
                                <td>
                                    <button type="button" class="btn btn-primary btn-sm" @onclick=@(() =>
                                         NavigationManager.NavigateTo($"/EditWord/{word.Id}"))>Edytuj
                                    </button>
                                </td>
                                <td>
                                    <button type="button" class="btn btn-danger btn-sm" @onclick=@(() =>
                                        DeleteClick(word)) data-bs-toggle="modal" data-bs-target="#deleteWordModal">Usuń</button>
                                </td>
                            </tr>
                }
                </tbody>
            </table>
            <div>
                <nav aria-label="Page navigation">
                    <ul class="pagination">
                        <li class="page-item">
                            @if(previousPage != 0)
                            {
                                <button class="page-link" @onclick=@(async() => 
                                    {
                                        currentPage = previousPage; await GetWords(SortOptions.SortBy, SortOptions.AscendingOrder, previousPage);
                                    }
                                )><i class="bi bi-arrow-left-circle"></i></button>
                            }
                            else {<button class="page-link invisible" disabled = true><i class="bi bi-arrow-left-circle"></i></button>}
                        </li>
                        <li class="@(currentPage == firstPage ? "page-item active" : "page-item")">
                            <button class="page-link" @onclick=@(async() => 
                                {
                                    currentPage = firstPage; await GetWords(SortOptions.SortBy, SortOptions.AscendingOrder, firstPage);
                                }
                            )>@firstPage</button>
                        </li>
                        <li class="@(currentPage == secondPage ? "page-item active" : "page-item")">
                            @if(secondPage == 0 && numberOfPages > 1){<button class="page-link" disabled = true>...</button>}
                            else if(secondPage != 0)
                            {
                                <button class="page-link" @onclick=@(async() => 
                                {
                                    currentPage = secondPage; await GetWords(SortOptions.SortBy, SortOptions.AscendingOrder, secondPage);
                                }
                                )>@secondPage</button>
                            }
                        </li>
                        <li class="@(currentPage == thirdPage ? "page-item active" : "page-item")">
                            @if(thirdPage != 0)
                            {
                                <button class="page-link" @onclick=@(async() => 
                                    {
                                        currentPage = thirdPage; await GetWords(SortOptions.SortBy, SortOptions.AscendingOrder, thirdPage);
                                    }
                                )>@thirdPage</button>
                            }
                        </li>
                        <li class="@(currentPage == fourthPage ? "page-item active" : "page-item")">
                            @if(fourthPage != 0)
                            {
                                <button class="page-link" @onclick=@(async() => 
                                    {
                                        currentPage = fourthPage; await GetWords(SortOptions.SortBy, SortOptions.AscendingOrder, fourthPage);
                                    }
                                )>@fourthPage</button>
                            }
                        </li>
                       <li class="@(currentPage == fifthPage ? "page-item active" : "page-item")">
                             @if(fifthPage != 0)
                            {
                                <button class="page-link" @onclick=@(async() => 
                                    {
                                        currentPage = fifthPage; await GetWords(SortOptions.SortBy, SortOptions.AscendingOrder, fifthPage);
                                    }
                                )>@fifthPage</button>
                            }
                        </li>
                        <li class="@(currentPage == sixthPage ? "page-item active" : "page-item")">
                            @if(sixthPage == 0 && numberOfPages > 5){<button class="page-link" disabled = true>...</button>}
                            else if(sixthPage != 0)
                            {                                
                                <button class="page-link" @onclick=@(async() => 
                                    {
                                        currentPage = sixthPage; await GetWords(SortOptions.SortBy, SortOptions.AscendingOrder, sixthPage);
                                    }
                                )>@sixthPage</button>
                            }   
                        </li>
                        <li class="@(currentPage == seventhPage ? "page-item active" : "page-item")">
                            @if(seventhPage != 0)
                            {
                                <button class="page-link" @onclick=@(async() => 
                                    {
                                        currentPage = seventhPage; await GetWords(SortOptions.SortBy, SortOptions.AscendingOrder, seventhPage);
                                    }
                                )>@seventhPage</button>
                            }
                        </li>
                        <li class="page-item">
                            @if(nextPage != 0)
                            {
                                <button class="page-link" @onclick=@(async() => 
                                    {
                                        currentPage = nextPage; await GetWords(SortOptions.SortBy, SortOptions.AscendingOrder, nextPage);
                                    }
                                )><i class="bi bi-arrow-right-circle"></i></button>
                            }
                        </li>
                    </ul>
                </nav>
            </div>
            <div>            
                <button type="button" class="btn btn-primary btn-sm" @onclick=@(() =>
                    NavigationManager.NavigateTo($"/CreateWord"))>Dodaj nowe słowo</button>
            </div>

    }
</div>
<div class="toast-container position-fixed bottom-0 end-0 p-3">
    <div class="toast bg-info" id="actionToast" role="alert" aria-live="assertive" aria-atomic="true">  
        <div class="d-flex">
                <div class="toast-body">
                    Dodanie/edycja słowa powiodła sie.
                </div>
                <button type="button" class="btn-close me-2 m-auto" data-bs-dismiss="toast" aria-label="Close"></button>
        </div>
    </div>
</div>

<div class="modal fade" id="deleteWordModal" tabindex="-1" aria-labelledby="deleteWordModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="deleteWordModalLabel">Usuwanie słowa</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <p>Na pewno chcesz usunąć słowo <em>@wordToDelete?.InPolish</em>?</p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Nie</button>
                <button type="button" class="btn btn-primary" data-bs-dismiss="modal" @onclick="DeleteWord">Tak</button>
            </div>
        </div>
    </div>
</div>


@code {
    [CascadingParameter]
    public Error? Error { get; set; }
    private RenderFragment? ErrorHandleMessage { get; set; }
    private Word[]? words;
    private int numberOfPages;
    private Word? wordToDelete;
    private bool ascendingOrderInPolish  { get; set; } = true;
    private bool ascendingOrderInWarmian  { get; set; } = false;
    private bool ascendingOrderPartOfSpeech  { get; set; } = false;

    private (string SortBy, bool AscendingOrder) SortOptions = ("InPolish", true);
    
    private int currentPage {get;set;} = 1;
    private int previousPage {get;set;}
    private int nextPage {get;set;}
    private int firstPage {get;set;}
    private int secondPage {get;set;}
    private int thirdPage {get;set;}
    private int fourthPage {get;set;}
    private int fifthPage {get;set;}
    private int sixthPage {get; set;}
    private int seventhPage {get; set;}

    protected override async Task OnInitializedAsync()
    {
        try
        {            
            await GetWords(SortOptions.SortBy, SortOptions.AscendingOrder, 1, 10);
        }
        catch (Exception ex)
        {
            ErrorHandleMessage = Error?.HandleError(ex);
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (SessionStorageServices.GetItem<bool?>("actionSucceeded") == true)
        {
            var module = await JS.InvokeAsync<IJSObjectReference>("import", "./Pages/AllWords.razor.js");
            await module.InvokeVoidAsync("showActionToast");
            SessionStorageServices.SetItem("actionSucceeded", false);
        }
        
    }

    private async Task GetWords(string sortBy, bool ascendingOrder, int pageNumber = 1, int wordsPerPage = 10)
    {        
            var response = await Http
                            .GetAsync(Endpoint.Url + "/GetWords" + $"?sortBy={sortBy}" + $"&ascendingOrder={ascendingOrder}"
                            + $"&pageNumber={pageNumber}" + $"&wordsPerPage={wordsPerPage}");
            if (!response.IsSuccessStatusCode)
            {
                ErrorHandleMessage = __builder =>
                {
                    <div class="alert alert-warning" role="alert">
                        Wyświetlenie słów się nie powiodło - <em>@response.StatusCode</em>
                    </div>
                };
                return;
            }
            var result = await response.Content.ReadFromJsonAsync<Words>();
            numberOfPages = result.NumbeOfPages;
            words = result.WordList.ToArray();
            Paginate();
    }

    private void Paginate()
    {
        if (numberOfPages <= 7)
        {
            firstPage = 1;
            secondPage = numberOfPages > 1 ? 2 : 0;
            thirdPage = numberOfPages > 2 ? 3 : 0;
            fourthPage = numberOfPages > 3 ? 4 : 0;
            fifthPage = numberOfPages > 4 ? 5 : 0;
            sixthPage = numberOfPages > 5 ? 6 : 0;
            seventhPage = numberOfPages > 6 ? 7 : 0;

            if(currentPage == 1)
            {
                previousPage = 0;
                nextPage = 2;
            }
            else if (currentPage == 7)
            {
                previousPage = 6;
                nextPage = 0;
            }
            else 
            {
                previousPage = currentPage - 1;
                nextPage = numberOfPages == currentPage ? 0 : currentPage + 1;
            }
        }
        else if (numberOfPages >= 8)
        {
            firstPage = 1;
            seventhPage = numberOfPages;

            if (currentPage == 1)
            {
                secondPage = 2;
                thirdPage = 3;
                fourthPage = 4;
                fifthPage = 5;
                sixthPage = 0;

                nextPage = 2;
                previousPage = 0;
            }
            else if (currentPage == numberOfPages)
            {
                secondPage = 0;
                thirdPage = currentPage - 4;
                fourthPage = currentPage - 3;
                fifthPage = currentPage - 2;
                sixthPage = currentPage - 1;

                nextPage = 0;
                previousPage = currentPage - 1;
            }
            else if (currentPage >= 2 && currentPage < 5)
            {
                secondPage = 2;
                thirdPage = 3;
                fourthPage = 4;
                fifthPage = 5;
                sixthPage = 0;

                nextPage = currentPage + 1;
                previousPage = currentPage - 1;
            }
            else if (currentPage != 8 && currentPage > 4 && currentPage < (numberOfPages-3))
            {
                secondPage = 0;
                thirdPage = currentPage - 1;
                fourthPage = currentPage;
                fifthPage = currentPage + 1;
                sixthPage = 0;

                nextPage = currentPage + 1;
                previousPage = currentPage - 1;
            }
            else if (currentPage >= (numberOfPages-3) && currentPage < numberOfPages)
            {
                secondPage = 0;
                thirdPage = numberOfPages - 4;
                fourthPage = numberOfPages - 3;
                fifthPage = numberOfPages - 2;
                sixthPage = numberOfPages -1;

                nextPage = currentPage + 1;
                previousPage = currentPage - 1;
            }
        }
    }

    private async Task SortClick(string sortBy)
    {
        SortOptions.SortBy = sortBy;
        switch(sortBy)
        {
            case "InPolish":
                if (ascendingOrderInPolish)
                {
                    SortOptions.AscendingOrder = false;
                    await GetWords(sortBy, false, currentPage);
                    ascendingOrderInPolish = false;
                }
                else 
                {
                    SortOptions.AscendingOrder = true;
                    await GetWords(sortBy, true, currentPage);
                    ascendingOrderInPolish = true;

                    ascendingOrderInWarmian = false;
                    ascendingOrderPartOfSpeech = false;
                }
                break;
            case "InWarmian":
                if (ascendingOrderInWarmian)
                {
                    SortOptions.AscendingOrder = false;
                    await GetWords(sortBy, false, currentPage);
                    ascendingOrderInWarmian = false;
                }
                else 
                {
                    SortOptions.AscendingOrder = true;
                    await GetWords(sortBy, true, currentPage);
                    ascendingOrderInWarmian = true;

                    ascendingOrderInPolish = false;
                    ascendingOrderPartOfSpeech = false;
                }
                break;
            case "PartOfSpeech":
                if (ascendingOrderPartOfSpeech)
                {
                    SortOptions.AscendingOrder = false;
                    await GetWords(sortBy, false, currentPage);
                    ascendingOrderPartOfSpeech = false;
                }
                else 
                {
                    SortOptions.AscendingOrder = true;
                    await GetWords(sortBy, true, currentPage);
                    ascendingOrderPartOfSpeech = true;

                    ascendingOrderInPolish = false;
                    ascendingOrderInWarmian = false;
                }
                break;
            default:
                return;
        }
    }

    public async Task DeleteClick(Word word)
    {
        wordToDelete = word;
    }
    public async Task DeleteWord()
    {
        try
        {
            var deleteResponse = await Http.DeleteAsync(Endpoint.Url + $"/DeleteWord?wordId={wordToDelete.Id}");
            if (deleteResponse.StatusCode == System.Net.HttpStatusCode.NotFound)
            {
                ErrorHandleMessage = __builder =>
                {
                    <div class="alert alert-warning" role="alert">
                        Nie znaleziono słowa "@wordToDelete.InPolish" w bazie danych
                    </div>
                };  
            }
            else if (!deleteResponse.IsSuccessStatusCode)
            {
                ErrorHandleMessage = __builder =>
                {
                    <div class="alert alert-warning" role="alert">
                        Usunięcie słowa się nie powiodło - <em>{response.StatusCode}</em>
                    </div>
                };
                return;
            }
            await GetWords("InPolish", true);
        }
        catch(Exception ex)
        {
            ErrorHandleMessage = Error?.HandleError(ex);
        }
    }
}