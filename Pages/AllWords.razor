@page "/allwords"
@using System.Net.Http
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using Models
@attribute [Authorize]
@inject HttpClient Http
@inject IConfiguration Configuration
@inject NavigationManager NavigationManager
@inject IJSRuntime JS
@inject ISessionStorageService SessionStorageServices
@inject Endpoint Endpoint
@inject Sorting Sorting
@inject IAccessTokenProvider TokenProvider


<PageTitle>Wszystkie słówka</PageTitle>

<h1>Wszystkie słowa ze słownika</h1>
<div class="wrapper">
    @if (words == null)
    {
        if (ErrorHandleMessage != null)
        {
            @ErrorHandleMessage
        }
        else
        {
            <p><em>Wczytywanie...</em></p>
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
        }
    }
    else
    {
            <table class="table">
                <thead>
                    <tr>
                        <th>
                            <button type="button" class="btn btn-outline-secondary btn-sm header-button" @onclick=@(async() => await SortClick("InPolish"))>
                                Po polsku
                            </button>
                        </th>
                        <th>
                            <button type="button" class="btn btn-outline-secondary btn-sm header-button" @onclick=@(async() => await SortClick("InWarmian"))>
                                Po warmińsku
                            </button>
                        </th>
                        <th>
                            <button type="button" class="btn btn-outline-secondary btn-sm header-button" @onclick=@(async() => await SortClick("PartOfSpeech"))>
                                Część mowy
                             </button>
                        </th>
                    </tr>
                </thead>
                <tbody>
                @foreach (var word in words)
                {
                            <tr>
                                <td>@word.InPolish</td>
                                <td>@word.InWarmian</td>
                                <td>@word.PartOfSpeech</td>
                                <td class="narrow">
                                    <button type="button" class="btn btn-primary btn-sm" @onclick=@(() =>
                                        NavigationManager.NavigateTo($"/EditWord/{word.Id}"))>Edytuj
                                    </button>
                                </td>
                                <td class="narrow">
                                    <button type="button" class="btn btn-danger btn-sm" @onclick=@(() =>
                                        DeleteClick(word)) data-bs-toggle="modal" data-bs-target="#deleteWordModal">Usuń</button>
                                </td>
                            </tr>
                }
                </tbody>
            </table>
            <div>
                <Pagination GetWords="@GetWords" @bind-CurrentPage="currentPage"
                    @ref="paginationComponent" SortOptions="@SortOptions" NumberOfPages="@numberOfPages"></Pagination>
            </div>
            <div>            
                <button type="button" class="btn btn-primary btn-sm" @onclick=@(() =>
                    NavigationManager.NavigateTo($"/CreateWord"))>Dodaj nowe słowo</button>
            </div>

    }
</div>
<div class="toast-container position-fixed bottom-0 end-0 p-3">
    <div class="toast bg-info" id="actionToast" role="alert" aria-live="assertive" aria-atomic="true">  
        <div class="d-flex">
                <div class="toast-body">
                    Dodanie/edycja słowa powiodła sie.
                </div>
                <button type="button" class="btn-close me-2 m-auto" data-bs-dismiss="toast" aria-label="Close"></button>
        </div>
    </div>
</div>

<div class="modal fade" id="deleteWordModal" tabindex="-1" aria-labelledby="deleteWordModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="deleteWordModalLabel">Usuwanie słowa</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <p>Na pewno chcesz usunąć słowo <em>@wordToDelete?.InPolish</em>?</p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Nie</button>
                <button type="button" class="btn btn-primary" data-bs-dismiss="modal" @onclick="DeleteWord">Tak</button>
            </div>
        </div>
    </div>
</div>


@code {
    [CascadingParameter]
    public Error? Error { get; set; }
    private RenderFragment? ErrorHandleMessage { get; set; }
    private Word[]? words;
    private int numberOfPages;
    private int wordsPerPage {get;set;} = 10;
    private Word? wordToDelete;
    private Pagination? paginationComponent {
        get { return _paginationComponent; } 
        set
        {
            _paginationComponent = value;
            _paginationComponent!.Paginate();
        }}
    private Pagination? _paginationComponent; 

    private (string SortBy, bool AscendingOrder) SortOptions = ("InPolish", true); 
    private int currentPage {get;set;} = 1;


    protected override async Task OnInitializedAsync()
    {
        try
        {   
            await GetWords(SortOptions.SortBy, SortOptions.AscendingOrder, 1);
        }
        catch (Exception ex)
        {
            ErrorHandleMessage = Error?.HandleError(ex);
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (SessionStorageServices.GetItem<bool?>("actionSucceeded") == true)
        {
            var module = await JS.InvokeAsync<IJSObjectReference>("import", "./Pages/AllWords.razor.js");
            await module.InvokeVoidAsync("showActionToast");
            SessionStorageServices.SetItem("actionSucceeded", false);
        }   
    }
    
    private async Task GetWords(string sortBy, bool ascendingOrder, int pageNumber = 1)
    {        
            string requestUri = Endpoint.Url + "/word/getwords" + $"?sortBy={sortBy}" + $"&ascendingOrder={ascendingOrder}"
                            + $"&pageNumber={pageNumber}" + $"&wordsPerPage={wordsPerPage}";
            var requestMessage = await GetHttpRequestMessage(HttpMethod.Get, requestUri);
            var response = await Http.SendAsync(requestMessage);

            if (!response.IsSuccessStatusCode)
            {
                ErrorHandleMessage = __builder =>
                {
                    <div class="alert alert-warning" role="alert">
                        Wyświetlenie słów się nie powiodło - <em>@response.StatusCode</em>
                    </div>
                };
                return;
            }
            var result = await response.Content.ReadFromJsonAsync<Words>();
            numberOfPages = result!.NumberOfPages;
            words = result.WordList!.ToArray();
            paginationComponent?.Paginate();
    }
    private async Task GetWords((string SortBy, bool AscendingOrder, int pageNumber) options)
    {
        await GetWords(options.SortBy, options.AscendingOrder, options.pageNumber);
    }

    private async Task<string> GetToken()
    {
        AccessToken accessToken; 
        var token = await TokenProvider.RequestAccessToken();
        token.TryGetToken(out accessToken);
        return accessToken.Value;
    }

    private async Task<HttpRequestMessage> GetHttpRequestMessage(HttpMethod httpMethod, string requestUri)
    {
            var requestMessage = new HttpRequestMessage(httpMethod, requestUri);            
            System.Net.Http.Headers.AuthenticationHeaderValue? authorization = new ("Bearer", await GetToken());
            requestMessage.Headers.Authorization = authorization;
            return requestMessage;
    }

    public async Task SortClick (string sortBy)
    {
        SortOptions = Sorting.Sort(sortBy, SortOptions);
        await GetWords(SortOptions.SortBy, SortOptions.AscendingOrder, currentPage);
    }
    public void DeleteClick(Word word)
    {
        wordToDelete = word;
    }
    public async Task DeleteWord()
    {
        try
        {
            string requestUri = Endpoint.Url + $"/word/deleteword?wordId={wordToDelete!.Id}";            
            var requestMessage = await GetHttpRequestMessage(HttpMethod.Delete, requestUri);
            var deleteResponse = await Http.SendAsync(requestMessage);
            if (deleteResponse.StatusCode == System.Net.HttpStatusCode.NotFound)
            {
                ErrorHandleMessage = __builder =>
                {
                    <div class="alert alert-warning" role="alert">
                        Nie znaleziono słowa "@wordToDelete.InPolish" w bazie danych
                    </div>
                };  
            }
            else if (!deleteResponse.IsSuccessStatusCode)
            {
                ErrorHandleMessage = __builder =>
                {
                    <div class="alert alert-warning" role="alert">
                        Usunięcie słowa się nie powiodło - <em>{response.StatusCode}</em>
                    </div>
                };
                return;
            }
            await GetWords("InPolish", true);
        }
        catch(Exception ex)
        {
            ErrorHandleMessage = Error?.HandleError(ex);
        }
    }
}