@page "/editword/{word}"
@using System.Net.Http
@using Models
@inject HttpClient Http
@inject IConfiguration Configuration
@inject NavigationManager NavigationManager

<div>
    <EditForm Model="@WordToSubmit" OnValidSubmit="@OnSubmit" class="mb-3">
        <DataAnnotationsValidator />
        <p>
            <label>
                Po polsku:
                <InputText minlength=1 maxlength=16 class="form-control" @bind-Value="WordToSubmit.InPolish" />
            </label>
            <ValidationMessage For="() => WordToSubmit.InPolish" />
        </p>
        <p>
            <label>
                Po warmińsku
                <InputText minlength=1 maxlength=16 class="form-control" @bind-Value="WordToSubmit.InWarmian" />
            </label>
            <ValidationMessage For="() => WordToSubmit.InWarmian" />
        </p>
        <p>
            <label>
                Część mowy
                <InputSelect @bind-Value="WordToSubmit.PartOfSpeech" class="form-select">
                    <option>Rzeczownik</option>
                    <option>Czasownik</option>
                    <option>Przymiotnik</option>
                    <option>Przysłówek</option>
                    <option>Liczebnik</option>
                    <option>Zaimek</option>
                    <option>Inna</option>
                </InputSelect>
            </label>
            <ValidationMessage For="() => WordToSubmit.PartOfSpeech" />
        </p>
        <button type="submit" class="btn btn-primary">Zapisz</button>
    </EditForm>
</div>
@if (ErrorHandleMessage != null)
{
    <p>@ErrorHandleMessage</p>
}

@code {
    [CascadingParameter]
    public Error? Error { get; set; }
    [Parameter]
    public string? Word { get; set; }
    private Word? WordToSubmit { get; set; } = new();
    private RenderFragment? ErrorHandleMessage { get; set; }

    protected override async Task OnInitializedAsync()
    {
        string request = $"/getword?word={Word}&translateFromPolish=true";
        try
        {
            var response = await Http.GetAsync(Configuration["serviceEndpoint"] + request);
            if (response.StatusCode == System.Net.HttpStatusCode.NotFound)
            {
                ErrorHandleMessage = __builder =>
                {
                    <div class="alert alert-warning" role="alert">
                        <p>Nie znaleziono słowa "@Word" w bazie danych</p>
                    </div>
                };
                return;
            }
            else if (!response.IsSuccessStatusCode)
            {
                ErrorHandleMessage = __builder =>
                {
                    <div class="alert alert-warning" role="alert">
                        <p>Pobranie słowa się nie powiodło - <em>@response.StatusCode</em> </p>
                    </div>
                };
                return;
            }
            WordToSubmit = await response.Content.ReadFromJsonAsync<Word>();
        }
        catch (Exception ex)
        {
            ErrorHandleMessage = Error?.HandleError(ex);
        }
    }
    public async Task OnSubmit()
    {
        string request = $"/editword";
        try
        {
            var response = await Http.PostAsJsonAsync<Word>(Configuration["serviceEndpoint"] + request, WordToSubmit);
            if (response.StatusCode == System.Net.HttpStatusCode.NotFound)
            {
                ErrorHandleMessage = __builder =>
                {
                    <div class="alert alert-warning" role="alert">
                        <p>Nie znaleziono słowa "@Word" w bazie danych</p>
                    </div>
                };
                return;
            }
            else if (!response.IsSuccessStatusCode)
            {
                ErrorHandleMessage = __builder =>
                {
                    <div class="alert alert-warning" role="alert">
                        <p>Edycja słowa się nie powiodła - <em>@response.StatusCode</em></p>
                    </div>
                };
                return;
            }
            NavigationManager.NavigateTo("words", true);
        }
        catch (Exception ex)
        {
            ErrorHandleMessage = Error?.HandleError(ex);
        }
    }
}