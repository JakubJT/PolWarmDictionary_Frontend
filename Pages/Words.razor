@page "/words"
@using System.Net.Http
@using Frontend.Models
@inject HttpClient Http
@inject IConfiguration Configuration
@inject NavigationManager NavigationManager
@inject IJSRuntime JS

<PageTitle>Wszystkie słówka</PageTitle>

<h1>Wszystkie słówka ze słownika</h1>
<div>
    @if (words == null)
    {
            <p><em>Wczytywanie...</em></p>
        if (ErrorHandleMessage != null)
        {
            @ErrorHandleMessage
        }
    }
    else
    {
            <table class="table">
                <thead>
                    <tr>
                        <th>Po polsku</th>
                        <th>Po warmińsku</th>
                        <th>Część mowy</th>
                        <th></th>
                        <th></th>
                    </tr>
                </thead>
                <tbody>
                @foreach (var word in words)
                {
                            <tr>
                                <td>@word.InPolish</td>
                                <td>@word.InWarmian</td>
                                <td>@word.PartOfSpeech</td>
                                <td>
                                    <button type="button" class="btn btn-primary btn-sm" @onclick=@(() =>
                        NavigationManager.NavigateTo($"/EditWord/{word.InPolish}"))>Edytuj</button>
                                </td>
                                <td>
                                    <button type="button" class="btn btn-danger btn-sm" @onclick=@(() =>
                        DeleteClick(word)) data-bs-toggle="modal" data-bs-target="#deleteWordModal">Usuń</button>
                                </td>
                            </tr>
                }
                </tbody>
            </table>
            <button type="button" class="btn btn-primary btn-sm" @onclick=@(() =>
        NavigationManager.NavigateTo($"/CreateWord"))>Dodaj nowe słowo</button>
    }

</div>

<div class="modal fade" id="deleteWordModal" tabindex="-1" aria-labelledby="deleteWordModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="deleteWordModalLabel">Usuwanie słowa</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <p>Na pewno chcesz usunąć słowo <em>@wordToDelete?.InPolish</em>?</p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Nie</button>
                <button type="button" class="btn btn-primary" data-bs-dismiss="modal" @onclick="DeleteWord">Tak</button>
            </div>
        </div>
    </div>
</div>


@code {
    [CascadingParameter]
    public Error? Error { get; set; }
    private RenderFragment? ErrorHandleMessage { get; set; }
    private Word[]? words;
    private Word? wordToDelete;

    protected override async Task OnInitializedAsync()
    {
        try
        {            
            await GetAllWords();
        }
        catch (Exception ex)
        {
            ErrorHandleMessage = Error?.HandleError(ex);
        }
    }

    private async Task GetAllWords()
    {        
            var response = await Http.GetAsync(Configuration["serviceEndpoint"] + "/GetAllWords");
            if (!response.IsSuccessStatusCode)
            {
                ErrorHandleMessage = __builder =>
                {
                    <div class="alert alert-warning" role="alert">
                        Wyświetlenie słów się nie powiodło - <em>{response.StatusCode}</em>
                    </div>
                };
                return;
            }
            words = await response.Content.ReadFromJsonAsync<Word[]>();
    } 

    public async Task DeleteClick(Word word)
    {
        @* await JS.InvokeVoidAsync("myModalBootstrap"); *@
        wordToDelete = word;
    }
    public async Task DeleteWord()
    {
        try
        {
            var deleteResponse = await Http.DeleteAsync(Configuration["serviceEndpoint"] + $"/DeleteWord?wordId={wordToDelete.Id}");
            if (deleteResponse.StatusCode == System.Net.HttpStatusCode.NotFound)
            {
                ErrorHandleMessage = __builder =>
                {
                    <div class="alert alert-warning" role="alert">
                        Nie znaleziono słowa "@wordToDelete.InPolish" w bazie danych
                    </div>
                };  
            }
            else if (!deleteResponse.IsSuccessStatusCode)
            {
                ErrorHandleMessage = __builder =>
                {
                    <div class="alert alert-warning" role="alert">
                        Usunięcie słowa się nie powiodło - <em>{response.StatusCode}</em>
                    </div>
                };
                return;
            }
            await GetAllWords();
        }
        catch(Exception ex)
        {
            ErrorHandleMessage = Error?.HandleError(ex);
        }
    }
}