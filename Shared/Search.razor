@using Models
@using System.Net.Http
@inject HttpClient Http
@inject IConfiguration Configuration
@inject ISessionStorageService SessionStorageServices
@inject Endpoint Endpoint
@inject IStringLocalizer<Localization.Localization> Loc

<div>
    <p>
        <button type="button" class="btn btn-primary" @onclick="ChangeLanguage">@Loc["SearchChangeLanguage"]</button>
        @if (PolishToWarmianTranslation)
        {
            <span>@Loc["SearchPolish"] <span class="oi oi-arrow-right" aria-hidden="true"></span> @Loc["SearchWarmian"]</span>
        }
        else
        {
            <span>@Loc["SearchWarmian"] <span class="oi oi-arrow-right" aria-hidden="true"></span> @Loc["SearchPolish"]</span>
        }
    </p>
</div>

<div>
    @if (IsRadzenBlazorStyle)
    {
            <form @onsubmit="OnSubmit" >
                <p>
                    <RadzenTextBox Placeholder="@Loc["SearchSearch"]" @bind-Value="TextValue" Class="w-100" MaxLength=15 />
                </p>
            @if (Result != null)
            {
                <p class=@(@EditGroupMode ? "pointer" :"")>
                    <RadzenDataGrid TItem="Word" Data="@Result" SelectionMode="DataGridSelectionMode.Single"
                    @bind-Value=@selectedWord>
                        <Columns>
                            @if (PolishToWarmianTranslation)
                            {
                                <RadzenDataGridColumn TItem="Word" Property="InPolish" Title="@Loc["SearchPolish"]" />
                                <RadzenDataGridColumn TItem="Word" Property="InWarmian" Title="@Loc["SearchWarmian"]" />
                                <RadzenDataGridColumn TItem="Word" Property="PartOfSpeech" Title="@Loc["SearchPartOfSpeech"]" />
                            }
                            else
                            {
                                <RadzenDataGridColumn TItem="Word" Property="InWarmian" Title="@Loc["SearchWarmian"]" />
                                <RadzenDataGridColumn TItem="Word" Property="InPolish" Title="@Loc["SearchPolish"]" />
                                <RadzenDataGridColumn TItem="Word" Property="PartOfSpeech" Title="@Loc["SearchPartOfSpeech"]" />
                            }
                        </Columns>
                    </RadzenDataGrid>
                </p>
                @if (EditGroupMode)
                {
                    <button type="button" class="btn btn-primary btn-sm button-add @isDisabled" @onclick=@(()=> { if(selectedWord !=null)
                        AddWord.InvokeAsync(selectedWord.FirstOrDefault());})>@Loc["SearchAdd"]
                    </button>
                }
            }
            </form>
    }
    else
    {
            <form @onsubmit="OnSubmit">
                <MudTextField @bind-Value="TextValue" Label="@Loc["SearchSearch"]" Variant="MudBlazor.Variant.Outlined" MaxLength=15
            Adornment="Adornment.End" AdornmentIcon="@Icons.Filled.Search" OnAdornmentClick="OnSubmit">
                </MudTextField>
            @if (Result != null)
            {
                <p>
                    <MudTable Items="@Result" Hover="true">
                        <HeaderContent>
                            <MudTh>@(PolishToWarmianTranslation ? @Loc["SearchPolish"] : @Loc["SearchWarmian"])</MudTh>
                            <MudTh>@(PolishToWarmianTranslation ? @Loc["SearchWarmian"] : @Loc["SearchPolish"])</MudTh>
                            <MudTh>@Loc["SearchPartOfSpeech"]</MudTh>
                        </HeaderContent>
                        <RowTemplate>
                            <MudTd DataLabel=@(PolishToWarmianTranslation ? "Polish" : "Warmian")>@(PolishToWarmianTranslation ?
                @context.InPolish : @context.InWarmian)</MudTd>
                            <MudTd DataLabel=@(PolishToWarmianTranslation ? "Warmian" : "Polish")>@(PolishToWarmianTranslation ?
                @context.InWarmian : @context.InPolish)</MudTd>
                            <MudTd DataLabel=PartOfSpeech>@context.PartOfSpeech</MudTd>
                        </RowTemplate>
                    </MudTable>
                </p>
            }
            </form>
    }
    @if (ErrorHandleMessage != null)
    {
        @ErrorHandleMessage
    }
</div>


@code {
    [CascadingParameter]
    public Error? Error { get; set; }
    [Parameter, EditorRequired]
    public bool IsRadzenBlazorStyle { get; set; }
    [Parameter]
    public EventCallback<Word> AddWord { get; set; }
    [Parameter]
    public bool EditGroupMode { get; set; } = false;
    private string? TextValue { get; set; }
    private bool PolishToWarmianTranslation { get; set; } = true;
    private List<Word>? Result { get; set; }
    private IList<Word>? selectedWord;
    private RenderFragment? ErrorHandleMessage { get; set; }
    private string? isDisabled
    {
        get
        {
            return selectedWord == null ? "disabled" : "";
        }
    }

    public void ChangeLanguage()
    {
        PolishToWarmianTranslation = !PolishToWarmianTranslation;
        SessionStorageServices.SetItem("polishToWarmianTranslation", PolishToWarmianTranslation);
    }

    protected override void OnInitialized()
    {
        if (EditGroupMode) return;
        LoadValuesFromStorage();
    }

    private void LoadValuesFromStorage()
    {
        if (SessionStorageServices.GetItem<bool?>("polishToWarmianTranslation") == false)
        {
            PolishToWarmianTranslation = false;
        };

        if (SessionStorageServices.GetItem<string?>("word") == null) return;

        TextValue = SessionStorageServices.GetItem<string?>("word");
        if (SessionStorageServices.GetItem<List<Word>?>("result") == null)
        {
            ErrorHandleMessage = Error?
                                .HandleError(errorMessage:String.Format(Loc["SearchErrorNoContent"], TextValue), alertType: "secondary");
        }
        else
        {
            Result = SessionStorageServices.GetItem<List<Word>?>("result");
        }
    }

    public async Task OnSubmit()
    {
        Result = null;
        ErrorHandleMessage = null;

        try
        {
            string request = $"/word/getword?word={TextValue}&translateFromPolish={PolishToWarmianTranslation}";
            var response = await Http.GetAsync(Endpoint.Url + request);
            if (response.StatusCode == System.Net.HttpStatusCode.NoContent)
            {
                ErrorHandleMessage = Error?
                                    .HandleError(errorMessage:String.Format(Loc["SearchErrorNoContent"], TextValue), alertType: "secondary");

                if (EditGroupMode) return;
                SessionStorageServices.SetItem("result", Result);
                SessionStorageServices.SetItem("word", TextValue);
                return;
            }
            else if (!response.IsSuccessStatusCode)
            {
                ErrorHandleMessage = Error?.HandleError(errorMessage: Loc["SearchErrorDefault"] + response.StatusCode);            
                return;
            }

            var reponseData = await response.Content.ReadFromJsonAsync<List<Word>>();
            foreach (var word in reponseData!)
            {
                word.PartOfSpeech = ConvertPartOfSpeechIdToPartOfSpeech(word.PartOfSpeechId);
            }
            Result = reponseData;

            if (EditGroupMode) return;
            SessionStorageServices.SetItem("result", Result);
            SessionStorageServices.SetItem("word", TextValue);
        }
        catch (Exception ex)
        {
            ErrorHandleMessage = Error?.HandleError(ex);
        }
    }

        private string? ConvertPartOfSpeechIdToPartOfSpeech(int? partOfSpeechId)
    {
        switch (partOfSpeechId)
        {
            case 1: return Loc["EditCreateWordFormNoun"];
            case 2: return Loc["EditCreateWordFormVerb"];
            case 4: return Loc["EditCreateWordFormAdjective"];
            case 5: return Loc["EditCreateWordFormAdverb"];
            case 3: return Loc["EditCreateWordFormNumeral"];
            case 6: return Loc["EditCreateWordFormPronoun"];
            case 7: return Loc["EditCreateWordFormOther"];
            default: return default;
        }
    }
}