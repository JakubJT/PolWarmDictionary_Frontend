@using System.Net.Http
@using Models
@using Microsoft.AspNetCore.Authorization
@using System.Text.Json
@using System.Text
@attribute [Authorize]
@inject ILogger<Error> Logger
@inject HttpClient Http
@inject IConfiguration Configuration
@inject NavigationManager NavigationManager
@inject ISessionStorageService SessionStorageServices
@inject RequestMessageGenerator RequestMessageGenerator
@inject Endpoint Endpoint
@inject IStringLocalizer<Localization.Localization> Loc

<div>
    <EditForm Model="@WordToSubmit" OnValidSubmit="@OnSubmit" class="mb-3">
        <DataAnnotationsValidator />
        <p>
            <label>
                @Loc["EditCreateWordFormInPolish"]
                <InputText minlength=1 maxlength=16 class="form-control" @bind-Value="WordToSubmit!.InPolish" />
            </label>
            <ValidationMessage For="() => WordToSubmit.InPolish" />
        </p>
        <p>
            <label>
                @Loc["EditCreateWordFormInWarmian"]
                <InputText minlength=1 maxlength=16 class="form-control" @bind-Value="WordToSubmit.InWarmian" />
            </label>
            <ValidationMessage For="() => WordToSubmit.InWarmian" />
        </p>
        <p>
            <label>
                @Loc["EditCreateWordFormPartOfSpeech"]
                <InputSelect @bind-Value="WordToSubmit.PartOfSpeechId" class="form-select">
                    <option value="">@Loc["EditCreateWordFormChoosePartOfSpeech"]</option>
                    <option value="1">@Loc["EditCreateWordFormNoun"]</option>
                    <option value="2">@Loc["EditCreateWordFormVerb"]</option>
                    <option value="4">@Loc["EditCreateWordFormAdjective"]</option>
                    <option value="5">@Loc["EditCreateWordFormAdverb"]</option>
                    <option value="3">@Loc["EditCreateWordFormNumeral"]</option>
                    <option value="6">@Loc["EditCreateWordFormPronoun"]</option>
                    <option value="7">@Loc["EditCreateWordFormOther"]</option>
                </InputSelect>
            </label>
            <ValidationMessage For="() => WordToSubmit.PartOfSpeechId" />
        </p>
        <button type="submit" class="btn btn-primary">@Loc["Save"]</button>
    </EditForm>
</div>
@if (ErrorHandleMessage != null)
{
    <p>@ErrorHandleMessage</p>
}

@code {
    [CascadingParameter]
    public Error? Error { get; set; }
    [Parameter]
    public string? WordId { get; set; }
    private Word? WordToSubmit { get; set; } = new();
    private RenderFragment? ErrorHandleMessage { get; set; }

    protected override async Task OnInitializedAsync()
    {
        string request;
        if (WordId == null) return;
        else request = $"/word/getwordbyid?wordId={WordId}";
        try
        {
            var response = await Http.GetAsync(Endpoint.Url + request);
            if (response.StatusCode == System.Net.HttpStatusCode.NotFound)
            {
                ErrorHandleMessage = Error?.HandleError(errorMessage: Loc["EditCreateWordFormErrorWordNotFound"],
                logText: "GetWordById request returned status code: " + response.StatusCode.ToString());
                return;
            }
            else if (!response.IsSuccessStatusCode)
            {
                ErrorHandleMessage = Error?.HandleError(errorMessage: @Loc["EditCreateWordFormGetErrorDefault"] + response.StatusCode);
                return;
            }
            WordToSubmit = await response.Content.ReadFromJsonAsync<Word>();
        }
        catch (Exception ex)
        {
            ErrorHandleMessage = Error?.HandleError(ex);
        }
    }
    public async Task OnSubmit()
    {
        string requestUri;
        HttpMethod httpMethod;
        if (WordId == null)
        {
            requestUri = Endpoint.Url + $"/word/createword";
            httpMethod = HttpMethod.Post;
        }
        else
        {
            requestUri = Endpoint.Url + $"/word/editword";
            httpMethod = HttpMethod.Put;
        }
        try
        {
            var requestMessage = await RequestMessageGenerator.GetHttpRequestMessage(httpMethod, requestUri);
            string jsonPostRequest = JsonSerializer.Serialize(WordToSubmit);
            requestMessage.Content = new StringContent(jsonPostRequest, Encoding.UTF8, "application/json");
            var response = await Http.SendAsync(requestMessage);

            if (response.StatusCode == System.Net.HttpStatusCode.NotFound)
            {
                ErrorHandleMessage = Error?.HandleError(errorMessage: @Loc["EditCreateWordFormErrorWordNotFound"],
                logText: "EditWord request returned status code: " + response.StatusCode.ToString());
                return;
            }
            else if (response.StatusCode == System.Net.HttpStatusCode.Conflict)
            {
                string? partOfSpeech = ConvertPartOfSpeechIdToPartOfSpeech(WordToSubmit?.PartOfSpeechId);
                ErrorHandleMessage = Error?.HandleError(errorMessage:
                $"\"{WordToSubmit!.InPolish}/{WordToSubmit.InWarmian}/{partOfSpeech}\" {Loc["EditCreateWordFormErrorWordConflict"]}");
                return;
            }
            else if (!response.IsSuccessStatusCode)
            {
                string errorMessage;
                string logText;
                if (WordId == null)
                {
                    errorMessage = Loc["EditCreateWordFormErrorCreateWordDefault"] + response.StatusCode;
                    logText = "CreateWord";
                }
                else
                {
                    errorMessage = Loc["EditCreateWordFormErrorEditWordDefault"] + response.StatusCode;
                    logText = "EditWord";
                }

                ErrorHandleMessage = Error?.HandleError(errorMessage: errorMessage,
                logText: logText + " request returned status code: " + response.StatusCode.ToString());
                return;
            }
            SessionStorageServices.SetItem("actionSucceeded", true);
            NavigationManager.NavigateTo("allwords", true);
        }
        catch (Exception ex)
        {
            ErrorHandleMessage = Error?.HandleError(ex);
        }
    }

    private string? ConvertPartOfSpeechIdToPartOfSpeech(int? partOfSpeechId)
    {
        switch (partOfSpeechId)
        {
            case 1: return Loc["EditCreateWordFormNoun"];
            case 2: return Loc["EditCreateWordFormVerb"];
            case 4: return Loc["EditCreateWordFormAdjective"];
            case 5: return Loc["EditCreateWordFormAdverb"];
            case 3: return Loc["EditCreateWordFormNumeral"];
            case 6: return Loc["EditCreateWordFormPronoun"];
            case 7: return Loc["EditCreateWordFormOther"];
            default: return default;
        }
    }
}