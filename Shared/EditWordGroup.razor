@using System.Net.Http
@using Models
@using Microsoft.AspNetCore.Authorization
@using System.Text.Json
@using System.Text
@attribute [Authorize]
@inject ILogger<Error> Logger
@inject HttpClient Http
@inject IConfiguration Configuration
@inject NavigationManager NavigationManager
@inject IJSRuntime JS
@inject ISessionStorageService SessionStorageServices
@inject Endpoint Endpoint
@inject RequestMessageGenerator RequestMessageGenerator

<div>
    <EditForm Model="@WordGroup" OnValidSubmit="@OnSubmit" class="mb-3">
        <DataAnnotationsValidator />
        <p>
            <label>
                Nazwa kolekcji:
                <InputText minlength=1 maxlength=16 class="form-control" @bind-Value="WordGroup!.Name" />
            </label>
            <ValidationMessage For="() => WordGroup.Name" />
        </p>
        Słowa:
        @if (WordGroup.Words != null)
        {
            @foreach (var word in WordGroup.Words)
            {
                <p>
                <div class="word">
                    <div class="word-text">
                        <InputText disabled="true" minlength=1 maxlength=16 class="form-control" @bind-Value="word.InPolish" />
                    </div>
                    <div class="word-text">
                        <InputText disabled="true" minlength=1 maxlength=16 class="form-control" @bind-Value="word.InWarmian" />
                    </div>
                    <button type="button" class="btn btn-danger btn-sm word-button" @onclick=@(() =>
                DeleteClick(word))>Usuń</button>
                </div>
                </p>
            }
        }
        <div class="search">
            <Search IsRadzenBlazorStyle="true" EditGroupMode="true" AddWord=@AddWord></Search>
        </div>
        @if (ErrorHandleMessage != null)
        {
            <p>@ErrorHandleMessage</p>
        }
        @if (CreateForm)
        {
            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Zamknij</button>
            <button type="submit" class="btn btn-primary">Utwórz</button>
        }
        else
        {
            <button type="button" class="btn btn-secondary" @onclick=@(() =>
            BackToReadMode.InvokeAsync(false))>Wróć</button>
            <button type="submit" class="btn btn-primary">Zapisz</button>
        }
    </EditForm>
</div>

@code {
    [CascadingParameter]
    public Error? Error { get; set; }
    [Parameter]
    public WordGroup? WordGroup { get; set; } = new();
    [Parameter]
    public bool CreateForm { get; set; } = false;
    [Parameter]
    public EventCallback<bool> BackToReadMode { get; set; }
    private RenderFragment? ErrorHandleMessage { get; set; }

    protected override void OnInitialized()
    {
        if (CreateForm) WordGroup!.Words = new();
    }

    public async Task OnSubmit()
    {
        string requestUri;
        if (CreateForm) requestUri = Endpoint.Url + $"/wordgroup/createwordgroup";
        else requestUri = Endpoint.Url + $"/wordgroup/editwordgroup";

        try
        {
            var requestMessage = await RequestMessageGenerator.GetHttpRequestMessage(HttpMethod.Post, requestUri);
            string jsonPostRequest = JsonSerializer.Serialize(WordGroup);
            requestMessage.Content = new StringContent(jsonPostRequest, Encoding.UTF8, "application/json");
            var response = await Http.SendAsync(requestMessage);

            if (response.StatusCode == System.Net.HttpStatusCode.NotFound)
            {
                ErrorHandleMessage = __builder =>
                {
                    <div class="alert alert-warning" role="alert">
                        <p>Nie znaleziono kolekcji słów w bazie danych</p>
                    </div>
                };
                Logger.LogError("Create/EditWordGroup request returned status code: " + response.StatusCode.ToString());
                return;
            }
            else if (response.StatusCode == System.Net.HttpStatusCode.Conflict)
            {
                ErrorHandleMessage = __builder =>
                {
                    <div class="alert alert-secondary" role="alert">
                        <p>Posiadasz już kolekcję o nazwie <em>@WordGroup!.Name</em></p>
                    </div>
                };
                return;
            }
            else if (!response.IsSuccessStatusCode)
            {
                ErrorHandleMessage = __builder =>
                {
                    <div class="alert alert-warning" role="alert">
                        <p>Utworzenie/Edycja kolekcji słów się nie powiodła - <em>@response.StatusCode</em></p>
                    </div>
                };
                return;
            }
            SessionStorageServices.SetItem("actionSucceeded", true);

            WordGroup = new();
            WordGroup.Words = new();
            ErrorHandleMessage = null;
            await BackToReadMode.InvokeAsync(true);
        }
        catch (Exception ex)
        {
            ErrorHandleMessage = Error?.HandleError(ex);
        }
    }

    public void AddWord(Word word)
    {
        ErrorHandleMessage = null;

        if (WordGroup!.Words!.Exists(w => w.Id == word.Id))
        {
            ErrorHandleMessage = __builder =>
            {
                <div class="alert alert-warning" role="alert">
                    <p>Słowo <em>@word.InPolish/@word.InWarmian/@word.PartOfSpeech</em> znajduje się już w kolekcji.</p>
                </div>
            };
        }
        else WordGroup!.Words!.Add(word);
    }

    private void DeleteClick(Word word)
    {
        WordGroup!.Words!.Remove(word);
    }

}